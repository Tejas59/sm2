<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Social App</title>
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
  <div class="container mt-5">
    <h1 class="mb-4">Social Feed</h1>
    <form id="create-post-form" action="/create-post" method="POST">
      <div class="form-group">
        <label for="imageUrl">Image URL:</label>
        <input type="text" class="form-control" name="imageUrl" id="imageUrl" required>
      </div>
      <div class="form-group">
        <label for="description">Description:</label>
        <textarea class="form-control" name="description" id="description" required></textarea>
      </div>
      <button type="submit" class="btn btn-primary">Submit Post</button>
    </form>

    <h2 class="mt-5">Posts</h2>
    <div class="posts">
      <% for (const post of posts) { %>
        <div class="post card my-4">
          <div class="card-body">
            <h3 class="card-title">Anonymous</h3>
            <img src="<%= post.imageUrl %>" class="card-img-top" alt="Post image">
            <p class="card-text mt-3"><%= post.description %></p>
            <h4 class="card-title">Comments:</h4>
            <ul class="comments" data-post-id="<%= post.id %>">
              <% for (const comment of post.comments) { %>
                <li class="card-text"><%= comment %></li>
              <% } %>
            </ul>
            <div class="comment-section">
              <form class="comment-form" data-post-id="<%= post.id %>">
                <div class="form-group">
                  <label for="comment">Add a comment:</label>
                  <input type="text" class="form-control" name="comment" required>
                </div>
                <button type="submit" class="btn btn-primary">Submit Comment</button>
              </form>
            </div>
          </div>
        </div>
      <% } %>
    </div>
  </div>

  <!-- Bootstrap JS and jQuery (Optional) -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

  <!-- Your JavaScript code -->
  <script>
    let allPosts = []; // Empty array to store fetched posts

    // Handle comment form submission using event delegation
    document.addEventListener('submit', async (event) => {
      event.preventDefault();

      if (event.target.classList.contains('comment-form')) {
        const form = event.target;
        const postId = form.dataset.postId;
        const commentContent = form.querySelector('input[name="comment"]').value;

        try {
          const response = await fetch(`/create-comment`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ postId, content: commentContent })
          });

          if (response.ok) {
            // Clear comment input and refetch comments for updated display
            form.querySelector('input[name="comment"]').value = '';
            fetchComments(postId);
          } else {
            console.error('Error creating comment');
            alert('Failed to add comment. Please try again.');
          }
        } catch (error) {
          console.error('Error submitting comment:', error);
          // Handle submission error (e.g., display error message)
        }
      } else if (event.target.id === 'create-post-form') {
        const form = event.target;
        const imageUrl = form.querySelector('#imageUrl').value;
        const description = form.querySelector('#description').value;

        try {
          const response = await fetch('/create-post', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ imageUrl, description })
          });

          if (response.ok) {
            const data = await response.json();
            console.log('Post created:', data);

            // Update the UI with the newly created post (optional)
            if (data.post) { // Check if post data is present in response
              const newPost = data.post;
              const postContainer = document.querySelector('.posts'); // Assuming a container for posts
              const newPostElement = createPostElement(newPost); // Call function to create a post element
              postContainer.appendChild(newPostElement);
            }

            form.querySelector('#imageUrl').value = '';
            form.querySelector('#description').value = '';
          } else {
            console.error('Error creating post');
            alert('Failed to create post. Please try again.');
          }
        } catch (error) {
          console.error('Error submitting post:', error);
          // Handle submission error (e.g., display error message)
        }
      }
    });

    // Function to
    // Function to fetch comments for a specific post
    async function fetchComments(postId) {
      if (!allPosts.find(post => post.id === postId)) { // Check if post data exists in cache
        try {
          const response = await fetch(`/comments/${postId}`);
          const comments = await response.json();
          allPosts.push({ id: postId, comments }); // Add post data to cache

          const commentList = document.querySelector(`.comments[data-post-id="${postId}"]`);
          commentList.innerHTML = ''; // Clear existing comments

          comments.forEach(comment => {
            const commentElement = document.createElement('li');
            commentElement.textContent = comment.content;
            commentList.appendChild(commentElement);
          });
        } catch (error) {
          console.error('Error fetching comments:', error);
          // Handle fetching error (e.g., display error message)
        }
      }
    }

    // Function to create a post element (optional)
    function createPostElement(post) {
      const postElement = document.createElement('div');
      postElement.classList.add('post');

      // Add post content dynamically based on your HTML structure
      postElement.innerHTML = `
        <h3>Anonymous</h3> <img src="${post.imageUrl}" alt="Post image">
        <p>${post.description}</p>
        <h4>Comments:</h4>
        <ul class="comments" data-post-id="${post.id}">
        </ul>
        <div class="comment-section">
          <form class="comment-form" data-post-id="${post.id}">
            <label for="comment">Add a comment:</label>
            <input type="text" name="comment" required>
            <button type="submit">Submit Comment</button>
          </form>
        </div>
      `;

      return postElement;
    }

    // Fetch comments for each post when the page loads
    document.addEventListener('DOMContentLoaded', async () => {
      const postIds = Array.from(document.querySelectorAll('.comments')).map(commentSection => commentSection.dataset.postId);
      postIds.forEach(fetchComments);
    });
  </script>
</body>
</html>


  

